//bpmn.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.6.1
// source: bpmn.proto

// go_package = "srv.bpmn";

package srv_bpmn

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RPCFuncInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUrl  string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	FuncName string `protobuf:"bytes,2,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	Timeout  int32  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *RPCFuncInfo) Reset() {
	*x = RPCFuncInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCFuncInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCFuncInfo) ProtoMessage() {}

func (x *RPCFuncInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bpmn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCFuncInfo.ProtoReflect.Descriptor instead.
func (*RPCFuncInfo) Descriptor() ([]byte, []int) {
	return file_bpmn_proto_rawDescGZIP(), []int{0}
}

func (x *RPCFuncInfo) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *RPCFuncInfo) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *RPCFuncInfo) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type RPCFuncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appended bool `protobuf:"varint,1,opt,name=appended,proto3" json:"appended,omitempty"`
}

func (x *RPCFuncResponse) Reset() {
	*x = RPCFuncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCFuncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCFuncResponse) ProtoMessage() {}

func (x *RPCFuncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bpmn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCFuncResponse.ProtoReflect.Descriptor instead.
func (*RPCFuncResponse) Descriptor() ([]byte, []int) {
	return file_bpmn_proto_rawDescGZIP(), []int{1}
}

func (x *RPCFuncResponse) GetAppended() bool {
	if x != nil {
		return x.Appended
	}
	return false
}

type RPCBPMNJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpmnProcessId string            `protobuf:"bytes,1,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	Version       int32             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Parameters    map[string]string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RPCBPMNJob) Reset() {
	*x = RPCBPMNJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCBPMNJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCBPMNJob) ProtoMessage() {}

func (x *RPCBPMNJob) ProtoReflect() protoreflect.Message {
	mi := &file_bpmn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCBPMNJob.ProtoReflect.Descriptor instead.
func (*RPCBPMNJob) Descriptor() ([]byte, []int) {
	return file_bpmn_proto_rawDescGZIP(), []int{2}
}

func (x *RPCBPMNJob) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *RPCBPMNJob) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RPCBPMNJob) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type RPCBPMNJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpmnProcessId string            `protobuf:"bytes,1,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	Ok            bool              `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Error         string            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Results       map[string]string `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RPCBPMNJobResponse) Reset() {
	*x = RPCBPMNJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCBPMNJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCBPMNJobResponse) ProtoMessage() {}

func (x *RPCBPMNJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bpmn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCBPMNJobResponse.ProtoReflect.Descriptor instead.
func (*RPCBPMNJobResponse) Descriptor() ([]byte, []int) {
	return file_bpmn_proto_rawDescGZIP(), []int{3}
}

func (x *RPCBPMNJobResponse) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *RPCBPMNJobResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *RPCBPMNJobResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RPCBPMNJobResponse) GetResults() map[string]string {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_bpmn_proto protoreflect.FileDescriptor

var file_bpmn_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x70, 0x6d, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x72,
	0x76, 0x5f, 0x62, 0x70, 0x6d, 0x6e, 0x22, 0x5f, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x46, 0x75, 0x6e,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x2d, 0x0a, 0x0f, 0x52, 0x50, 0x43, 0x46, 0x75,
	0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x42, 0x50,
	0x4d, 0x4e, 0x4a, 0x6f, 0x62, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70,
	0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x72, 0x76, 0x5f,
	0x62, 0x70, 0x6d, 0x6e, 0x2e, 0x52, 0x50, 0x43, 0x42, 0x50, 0x4d, 0x4e, 0x4a, 0x6f, 0x62, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x52,
	0x50, 0x43, 0x42, 0x50, 0x4d, 0x4e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x72, 0x76, 0x5f, 0x62, 0x70, 0x6d, 0x6e, 0x2e, 0x52, 0x50, 0x43, 0x42, 0x50, 0x4d,
	0x4e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x55,
	0x0a, 0x0b, 0x42, 0x50, 0x4d, 0x4e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a,
	0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x2e, 0x73, 0x72, 0x76, 0x5f, 0x62, 0x70, 0x6d, 0x6e, 0x2e, 0x52, 0x50, 0x43,
	0x46, 0x75, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x19, 0x2e, 0x73, 0x72, 0x76, 0x5f, 0x62,
	0x70, 0x6d, 0x6e, 0x2e, 0x52, 0x50, 0x43, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x4f, 0x0a, 0x07, 0x42, 0x50, 0x4d, 0x4e, 0x4a, 0x6f, 0x62,
	0x12, 0x44, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x2e, 0x73, 0x72, 0x76, 0x5f, 0x62, 0x70, 0x6d, 0x6e, 0x2e, 0x52, 0x50, 0x43, 0x42,
	0x50, 0x4d, 0x4e, 0x4a, 0x6f, 0x62, 0x1a, 0x1c, 0x2e, 0x73, 0x72, 0x76, 0x5f, 0x62, 0x70, 0x6d,
	0x6e, 0x2e, 0x52, 0x50, 0x43, 0x42, 0x50, 0x4d, 0x4e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bpmn_proto_rawDescOnce sync.Once
	file_bpmn_proto_rawDescData = file_bpmn_proto_rawDesc
)

func file_bpmn_proto_rawDescGZIP() []byte {
	file_bpmn_proto_rawDescOnce.Do(func() {
		file_bpmn_proto_rawDescData = protoimpl.X.CompressGZIP(file_bpmn_proto_rawDescData)
	})
	return file_bpmn_proto_rawDescData
}

var file_bpmn_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bpmn_proto_goTypes = []interface{}{
	(*RPCFuncInfo)(nil),        // 0: srv_bpmn.RPCFuncInfo
	(*RPCFuncResponse)(nil),    // 1: srv_bpmn.RPCFuncResponse
	(*RPCBPMNJob)(nil),         // 2: srv_bpmn.RPCBPMNJob
	(*RPCBPMNJobResponse)(nil), // 3: srv_bpmn.RPCBPMNJobResponse
	nil,                        // 4: srv_bpmn.RPCBPMNJob.ParametersEntry
	nil,                        // 5: srv_bpmn.RPCBPMNJobResponse.ResultsEntry
}
var file_bpmn_proto_depIdxs = []int32{
	4, // 0: srv_bpmn.RPCBPMNJob.parameters:type_name -> srv_bpmn.RPCBPMNJob.ParametersEntry
	5, // 1: srv_bpmn.RPCBPMNJobResponse.results:type_name -> srv_bpmn.RPCBPMNJobResponse.ResultsEntry
	0, // 2: srv_bpmn.BPMNService.RegisterFunction:input_type -> srv_bpmn.RPCFuncInfo
	2, // 3: srv_bpmn.BPMNJob.CallFunction:input_type -> srv_bpmn.RPCBPMNJob
	1, // 4: srv_bpmn.BPMNService.RegisterFunction:output_type -> srv_bpmn.RPCFuncResponse
	3, // 5: srv_bpmn.BPMNJob.CallFunction:output_type -> srv_bpmn.RPCBPMNJobResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_bpmn_proto_init() }
func file_bpmn_proto_init() {
	if File_bpmn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bpmn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCFuncInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCFuncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCBPMNJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCBPMNJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bpmn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_bpmn_proto_goTypes,
		DependencyIndexes: file_bpmn_proto_depIdxs,
		MessageInfos:      file_bpmn_proto_msgTypes,
	}.Build()
	File_bpmn_proto = out.File
	file_bpmn_proto_rawDesc = nil
	file_bpmn_proto_goTypes = nil
	file_bpmn_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BPMNServiceClient is the client API for BPMNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BPMNServiceClient interface {
	RegisterFunction(ctx context.Context, in *RPCFuncInfo, opts ...grpc.CallOption) (*RPCFuncResponse, error)
}

type bPMNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBPMNServiceClient(cc grpc.ClientConnInterface) BPMNServiceClient {
	return &bPMNServiceClient{cc}
}

func (c *bPMNServiceClient) RegisterFunction(ctx context.Context, in *RPCFuncInfo, opts ...grpc.CallOption) (*RPCFuncResponse, error) {
	out := new(RPCFuncResponse)
	err := c.cc.Invoke(ctx, "/srv_bpmn.BPMNService/RegisterFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BPMNServiceServer is the server API for BPMNService service.
type BPMNServiceServer interface {
	RegisterFunction(context.Context, *RPCFuncInfo) (*RPCFuncResponse, error)
}

// UnimplementedBPMNServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBPMNServiceServer struct {
}

func (*UnimplementedBPMNServiceServer) RegisterFunction(context.Context, *RPCFuncInfo) (*RPCFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFunction not implemented")
}

func RegisterBPMNServiceServer(s *grpc.Server, srv BPMNServiceServer) {
	s.RegisterService(&_BPMNService_serviceDesc, srv)
}

func _BPMNService_RegisterFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCFuncInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPMNServiceServer).RegisterFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_bpmn.BPMNService/RegisterFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPMNServiceServer).RegisterFunction(ctx, req.(*RPCFuncInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _BPMNService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srv_bpmn.BPMNService",
	HandlerType: (*BPMNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFunction",
			Handler:    _BPMNService_RegisterFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bpmn.proto",
}

// BPMNJobClient is the client API for BPMNJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BPMNJobClient interface {
	CallFunction(ctx context.Context, in *RPCBPMNJob, opts ...grpc.CallOption) (*RPCBPMNJobResponse, error)
}

type bPMNJobClient struct {
	cc grpc.ClientConnInterface
}

func NewBPMNJobClient(cc grpc.ClientConnInterface) BPMNJobClient {
	return &bPMNJobClient{cc}
}

func (c *bPMNJobClient) CallFunction(ctx context.Context, in *RPCBPMNJob, opts ...grpc.CallOption) (*RPCBPMNJobResponse, error) {
	out := new(RPCBPMNJobResponse)
	err := c.cc.Invoke(ctx, "/srv_bpmn.BPMNJob/CallFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BPMNJobServer is the server API for BPMNJob service.
type BPMNJobServer interface {
	CallFunction(context.Context, *RPCBPMNJob) (*RPCBPMNJobResponse, error)
}

// UnimplementedBPMNJobServer can be embedded to have forward compatible implementations.
type UnimplementedBPMNJobServer struct {
}

func (*UnimplementedBPMNJobServer) CallFunction(context.Context, *RPCBPMNJob) (*RPCBPMNJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallFunction not implemented")
}

func RegisterBPMNJobServer(s *grpc.Server, srv BPMNJobServer) {
	s.RegisterService(&_BPMNJob_serviceDesc, srv)
}

func _BPMNJob_CallFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCBPMNJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPMNJobServer).CallFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv_bpmn.BPMNJob/CallFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPMNJobServer).CallFunction(ctx, req.(*RPCBPMNJob))
	}
	return interceptor(ctx, in, info, handler)
}

var _BPMNJob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srv_bpmn.BPMNJob",
	HandlerType: (*BPMNJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallFunction",
			Handler:    _BPMNJob_CallFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bpmn.proto",
}
